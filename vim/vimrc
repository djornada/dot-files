call plug#begin()
  Plug 'airblade/vim-gitgutter'
  Plug 'artanikin/vim-synthwave84'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'honza/dockerfile.vim'
  Plug 'honza/vim-snippets'
  Plug 'itchyny/lightline.vim'
  Plug 'jparise/vim-graphql'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'leafgarland/typescript-vim'
  Plug 'luochen1990/rainbow'
  Plug 'mxw/vim-jsx', {'for': 'javascript'}
  Plug 'neoclide/coc.nvim'
  Plug 'pangloss/vim-javascript'
  Plug 'peitalin/vim-jsx-typescript'
  Plug 'raimondi/delimitmate'
  Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
  Plug 'sheerun/vim-polyglot'
  Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-markdown', {'for': 'markdown'}
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'w0rp/ale'
call plug#end()

autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

let g:coc_global_extensions = ['coc-snippets', 'coc-tsserver', 'coc-css','coc-json', 'coc-git', 'coc-tabnine']

if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
  let g:coc_global_extensions += ['coc-prettier']
endif

if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
  let g:coc_global_extensions += ['coc-eslint']
endif

if has("patch-8.1.1564")
  set signcolumn=number
else
  set signcolumn=yes
endif

if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

if (has("termguicolors"))
  set termguicolors
endif

let $FZF_DEFAULT_COMMAND = 'rg --files --hidden'

syntax on

let g:rainbow_active = 1
let g:jsx_ext_required = 0
let g:syntastic_auto_loc_list = 1

let g:one_allow_italics = 1

let g:lightline = {
\   'active': {
\     'left':[ [ 'mode', 'paste' ],
\              [ 'gitbranch', 'readonly', 'filename', 'modified' ]
\     ]
\   },
\   'component': {
\     'lineinfo': ' %3l:%-2v',
\   },
\   'component_function': {
\     'gitbranch': 'fugitive#head',
\   }
\ }

let mapleader = ' '

nnoremap <C-p> :Files<Cr>
nnoremap <C-g> :Rg<Cr>
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>q :q<cr>
nnoremap <leader>w :w!<cr>
nmap <leader>rn <Plug>(coc-rename)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gr <Plug>(coc-references)

imap <C-l> <Plug>(coc-snippets-expand)
vmap <C-j> <Plug>(coc-snippets-select)

let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'
imap <C-j> <Plug>(coc-snippets-expand-jump)
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

colorscheme synthwave84

set ai
set autoread
set cmdheight=2
set hidden
set ignorecase
set incsearch
set laststatus=2
set list
set listchars=trail:·,tab:»\ ,eol:↲
set ls=2
set magic
set nobackup
set noexpandtab
set noshowmode
set nowritebackup
set number
set ruler
set shiftround
set shiftwidth=2
set shortmess+=c
set smartcase
set softtabstop=2
set splitbelow
set splitright
set tabstop=2
set updatetime=300
set wildignore=*.o,*.obj,*~,node_modules
set wildmenu

set guioptions-=m
set guioptions-=T
set guioptions-=r
set guioptions-=L
